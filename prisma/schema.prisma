datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role    @default(USER)
  surveys       Survey[]
}

model Survey {
  id        String   @id @default(cuid())
  title     String
  result    Json
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  available Boolean  @default(true)
  finished  Boolean  @default(false)
}

model SurveyDefinition {
  id              String   @id @default(cuid())
  data            Json?
  name            String
  version         String
  internalVersion String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String  
  active          Boolean  @default(false)
  notes           String?
}

model Diagnoses {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String? 
  personToContact PersonToContact
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model File {
    id           String   @id @default(uuid())
    bucket       String
    fileName     String   @unique
    originalName String
    createdAt    DateTime @default(now())
    size         Int
}

enum Role {
  USER
  ADMIN
  PORTAL
}

enum PersonToContact {
  OOGARTS
  OPTOMETRIST
  HUISARTS
}